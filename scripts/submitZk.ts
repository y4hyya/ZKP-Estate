import { ethers } from "hardhat";
import * as fs from "fs";
import * as path from "path";

async function main() {
  const contractAddress = process.env.CONTRACT_ADDRESS || "0x5FbDB2315678afecb367f032d93F642f64180aa3";
  const policyId = process.env.POLICY_ID || "1";
  
  console.log("Submitting ZK proof to contract...");
  console.log("Contract address:", contractAddress);
  console.log("Policy ID:", policyId);
  
  // Get the contract
  const zkRent = await ethers.getContractAt("ZkRent", contractAddress);
  
  // Load proof from file (in production, this would be generated by the prove script)
  const proofDir = path.join(__dirname, "..", "artifacts", "proofs");
  const proofFiles = fs.readdirSync(proofDir).filter(f => f.endsWith('.json'));
  
  if (proofFiles.length === 0) {
    console.error("No proof files found. Run 'npm run scripts:prove' first.");
    process.exit(1);
  }
  
  // Use the most recent proof file
  const latestProofFile = proofFiles.sort().pop()!;
  const proofPath = path.join(proofDir, latestProofFile);
  const proofData = JSON.parse(fs.readFileSync(proofPath, "utf8"));
  
  console.log("Using proof from:", latestProofFile);
  console.log("Proof hash:", proofData.proofHash);
  console.log("Public inputs:", proofData.publicInputs);
  
  // Verify the proof first
  console.log("Verifying proof...");
  const isValid = await zkRent.verifyProof(proofData.proofHash, proofData.publicInputs);
  console.log("Proof verification result:", isValid);
  
  if (!isValid) {
    console.error("Proof verification failed!");
    process.exit(1);
  }
  
  // Get policy details
  const policy = await zkRent.policies(policyId);
  const totalAmount = policy.rentAmount + policy.deposit;
  
  console.log("Policy details:");
  console.log("Rent amount:", ethers.formatEther(policy.rentAmount), "ETH");
  console.log("Deposit:", ethers.formatEther(policy.deposit), "ETH");
  console.log("Total amount:", ethers.formatEther(totalAmount), "ETH");
  
  // Start the lease with ZK proof
  console.log("Starting lease with ZK proof...");
  const tx = await zkRent.startLease(policyId, proofData.proofHash, {
    value: totalAmount
  });
  
  const receipt = await tx.wait();
  console.log("Lease started! Transaction hash:", receipt?.hash);
  
  // Get the lease ID from the event
  const event = receipt?.logs.find(log => {
    try {
      const parsed = zkRent.interface.parseLog(log);
      return parsed?.name === "LeaseStarted";
    } catch {
      return false;
    }
  });
  
  if (event) {
    const parsed = zkRent.interface.parseLog(event);
    const leaseId = parsed?.args[2];
    console.log("Lease ID:", leaseId?.toString());
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
